package TinyImageFormatGenerator

import collection.mutable.StringBuilder

case class WriteZigBlock(table: Seq[(String, GeneratorCode)]):
  val text = {
    var sb = StringBuilder()
    sb ++= "// Do Not Edit Autogenerated by tiny_image_format_generator\n\n"
    sb ++= "const TinyImageFormat = @import(\"tiny_image_format.zig\").Format;\n"

    genU32QueryFunc(sb, "Width", 1, { _.SizeAtBlockDim(BlockDim.Width) })
    genU32QueryFunc(sb, "Height", 1, { _.SizeAtBlockDim(BlockDim.Height) })
    genU32QueryFunc(sb, "Depth", 1, { _.SizeAtBlockDim(BlockDim.Depth) })
    genU32QueryFunc(sb, "ByteSize", 4, { _.ByteSizeOfBlock })

    genPixelCountOfBlockFunc(sb)

    sb.result()

  }
  def genPixelCountOfBlockFunc(sb: StringBuilder) = {
    sb ++= "pub fn PixelCount(fmt: TinyImageFormat) u32 {\n"
    sb ++= "    return Width(fmt) * Height(fmt) * Depth(fmt);\n"
    sb ++= "}\n\n"
  }

  def genU32QueryFunc(sb: StringBuilder, name: String, default: Int, func: (GeneratorCode) => Int) =
    sb ++= s"pub fn $name(fmt: TinyImageFormat) u8 {\n"
    sb ++= "    switch(fmt) {\n"
    var count = 0;
    table.foreach(fmt =>
      if func(fmt._2) != default then { count += 1; sb ++= f"        .${fmt._1} => return ${func(fmt._2)},\n" },
    )
    if table.toArray.length != count then sb ++= s"        else => return $default,\n"
    sb ++= "    }\n"
    sb ++= "}\n\n"
