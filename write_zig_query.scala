package TinyImageFormatGenerator

import collection.mutable.StringBuilder

case class WriteZigQuery(table: Seq[(String, GeneratorCode)]):
  val text = {
    var sb = StringBuilder()
    sb ++= "// Do Not Edit Autogenerated by tiny_image_format_generator\n\n"
    sb ++= "const TinyImageFormat = @import(\"tiny_image_format.zig\").Format;\n"
    sb ++= "\n"

    genBoolQueryFunc(sb, "HasNormalised", false, { _.HasNormalised })
    genBoolQueryFunc(sb, "HasSigned", false, { _.HasSigned })
    genBoolQueryFunc(sb, "HasSRGB", false, { _.HasSRGB })
    genBoolQueryFunc(sb, "HasDepthOnly", false, { _.HasDepthOnly })
    genBoolQueryFunc(sb, "HasStencilOnly", false, { _.HasStencilOnly })
    genBoolQueryFunc(sb, "HasDepthAndStencil", false, { _.HasDepthAndStencil })

    genBoolQueryFunc(sb, "IsPackFormat", false, { _.IsInPackNamespace })
    genBoolQueryFunc(sb, "IsDepthStencilFormat", false, { _.IsInDepthStencilNamespace })
    genBoolQueryFunc(sb, "IsDxtcFormat", false, { _.IsInDepthStencilNamespace })
    genBoolQueryFunc(sb, "IsEtcFormat", false, { _.IsInEtcNamespace })
    genBoolQueryFunc(sb, "IsAstcFormat", false, { _.IsInAstcNamespace })
    genBoolQueryFunc(sb, "IsClutFormat", false, { _.IsInClutNamespace })
    genBoolQueryFunc(sb, "IsCompressed", false, { _.IsCompressed })
    genBoolQueryFunc(sb, "IsHomogenous", false, { _.IsHomogenous })

    genNameStringMap(sb)
    genFormatToString(sb)

    sb.result()
  }

  def genBoolQueryFunc(sb: StringBuilder, name: String, default: Boolean, func: (GeneratorCode) => Boolean) =
    sb ++= s"pub fn $name(fmt: TinyImageFormat) bool {\n"
    sb ++= "    switch(fmt) {\n"
    table.foreach(fmt => if func(fmt._2) != default then sb ++= f"        .${fmt._1} => return true,\n")
    sb ++= s"        else => return $default,\n"
    sb ++= "    }\n}\n\n"

  def genNameStringMap(sb: StringBuilder) =
    sb ++= "pub fn NameToFormat(name: []const u8) TinyImageFormat {\n"
    sb ++= "    const CompTimeStringMap = @import(\"std\").ComptimeStringMap;\n"
    sb ++= "    @setEvalBranchQuota(4000);\n"
    sb ++= "    const nameMap = CompTimeStringMap(TinyImageFormat, .{\n"
    table.foreach(fmt => sb ++= f"        .{ \"${fmt._1}\", .${fmt._1} },\n")
    sb ++= "    });\n"
    sb ++= "    return nameMap.get(name).?;\n"
    sb ++= "}\n\n"

  def genFormatToString(sb: StringBuilder) =
    sb ++= "pub fn FormatToName(fmt: TinyImageFormat) []const u8 {\n"
    sb ++= "    switch(fmt) {\n"
    table.foreach(fmt => sb ++= f"        .${fmt._1} => return \"${fmt._1}\",\n")
    sb ++= "    }\n"
    sb ++= "}\n\n"
