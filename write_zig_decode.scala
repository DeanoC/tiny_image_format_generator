package TinyImageFormatGenerator

import collection.mutable.StringBuilder

case class WriteZigDecode(table: Seq[(String, GeneratorCode)]):
  val text = {
    var sb = StringBuilder()
    sb ++= "// Do Not Edit Autogenerated by tiny_image_format_generator\n\n"
    sb ++= "const TinyImageFormat = @import(\"tiny_image_format.zig\").Format;\n"
    sb ++= "\n"

    genSRGBTable(sb)

    val spaces = "            "
    genCanDecodeLogicalPixels(sb, true, 32, { (fmt, isFloat, bitWidth) => fmt.FetchPixel(isFloat, bitWidth, spaces) })
    sb ++= "const Input = struct { plane0: []const u8, plane1: []const u8 = undefined };\n\n"
    genDecodeLogicalPixels(sb, true, 32, { (fmt, isFloat, bitWidth) => fmt.FetchPixel(isFloat, bitWidth, spaces) })

    sb.result()
  }

  def genCanDecodeLogicalPixels(
      sb: StringBuilder,
      isOutputFloat: Boolean,
      outputBitwidth: Int,
      func: (GeneratorCode, Boolean, Int) => Option[String],
  ) =
    val postfix = (if isOutputFloat then "f" else "u") ++ s"$outputBitwidth"
    sb ++= s"pub fn CanDecodePixelsTo${postfix.toUpperCase()}(fmt: TinyImageFormat) bool {\n"
    sb ++= s"    switch (fmt) {\n"

    table.foreach(fmt =>
      if func(fmt._2, isOutputFloat, outputBitwidth) != None then sb ++= f"        .${fmt._1} => return true,\n",
    )

    sb ++= s"        else => return false,\n"
    sb ++= s"    }\n"
    sb ++= s"}\n\n"

  def genDecodeLogicalPixels(
      sb: StringBuilder,
      isOutputFloat: Boolean,
      outputBitwidth: Int,
      func: (GeneratorCode, Boolean, Int) => Option[String],
  ) =
    val zigType = (if isOutputFloat then "f" else "u") ++ s"$outputBitwidth"
    sb ++= s"pub fn DecodePixelsTo${zigType.toUpperCase()}(fmt: TinyImageFormat, input: Input, output: []@Vector(4, $zigType)) void {\n"
    sb ++= s"    switch (fmt) {\n"

    table.foreach(fmt =>
      if func(fmt._2, isOutputFloat, outputBitwidth) != None then
        sb ++= f"        .${fmt._1} => {\n${func(fmt._2, isOutputFloat, outputBitwidth).get}"
        sb ++= s"        },\n",
    )

    sb ++= s"        else => {},\n"
    sb ++= s"    }\n"
    sb ++= s"}\n"

  def genSRGBTable(sb: StringBuilder) =
    val srgbTable = Array(0.00000000, 0.00030353, 0.00060705, 0.00091058, 0.00121411, 0.00151763, 0.00182116,
      0.00212469, 0.00242822, 0.00273174, 0.00303527, 0.00334654, 0.00367651, 0.00402472, 0.00439144, 0.00477695,
      0.00518152, 0.00560539, 0.00604883, 0.00651209, 0.00699541, 0.00749903, 0.00802319, 0.00856812, 0.00913406,
      0.00972122, 0.01032982, 0.01096009, 0.01161224, 0.01228649, 0.01298303, 0.01370208, 0.01444384, 0.01520851,
      0.01599629, 0.01680738, 0.01764195, 0.01850022, 0.01938236, 0.02028856, 0.02121901, 0.02217388, 0.02315336,
      0.02415763, 0.02518686, 0.02624122, 0.02732089, 0.02842604, 0.02955683, 0.03071344, 0.03189603, 0.03310476,
      0.03433981, 0.03560131, 0.03688945, 0.03820436, 0.03954624, 0.04091520, 0.04231141, 0.04373503, 0.04518620,
      0.04666508, 0.04817182, 0.04970656, 0.05126947, 0.05286065, 0.05448028, 0.05612849, 0.05780543, 0.05951124,
      0.06124607, 0.06301003, 0.06480328, 0.06662595, 0.06847818, 0.07036011, 0.07227186, 0.07421358, 0.07618539,
      0.07818743, 0.08021983, 0.08228271, 0.08437622, 0.08650047, 0.08865561, 0.09084173, 0.09305898, 0.09530748,
      0.09758736, 0.09989874, 0.10224175, 0.10461649, 0.10702311, 0.10946172, 0.11193243, 0.11443538, 0.11697067,
      0.11953843, 0.12213880, 0.12477184, 0.12743770, 0.13013649, 0.13286833, 0.13563335, 0.13843162, 0.14126331,
      0.14412849, 0.14702728, 0.14995980, 0.15292616, 0.15592647, 0.15896086, 0.16202940, 0.16513222, 0.16826940,
      0.17144109, 0.17464739, 0.17788841, 0.18116423, 0.18447499, 0.18782076, 0.19120167, 0.19461781, 0.19806930,
      0.20155624, 0.20507871, 0.20863685, 0.21223073, 0.21586053, 0.21952623, 0.22322798, 0.22696589, 0.23074007,
      0.23455065, 0.23839766, 0.24228120, 0.24620140, 0.25015837, 0.25415218, 0.25818291, 0.26225072, 0.26635566,
      0.27049786, 0.27467737, 0.27889434, 0.28314880, 0.28744090, 0.29177070, 0.29613832, 0.30054384, 0.30498737,
      0.30946895, 0.31398875, 0.31854683, 0.32314324, 0.32777813, 0.33245158, 0.33716366, 0.34191445, 0.34670410,
      0.35153270, 0.35640025, 0.36130688, 0.36625269, 0.37123778, 0.37626222, 0.38132611, 0.38642952, 0.39157256,
      0.39675531, 0.40197787, 0.40724030, 0.41254270, 0.41788515, 0.42326775, 0.42869055, 0.43415371, 0.43965724,
      0.44520125, 0.45078585, 0.45641106, 0.46207705, 0.46778384, 0.47353154, 0.47932023, 0.48514998, 0.49102089,
      0.49693304, 0.50288659, 0.50888145, 0.51491779, 0.52099568, 0.52711523, 0.53327650, 0.53947961, 0.54572457,
      0.55201149, 0.55834049, 0.56471163, 0.57112491, 0.57758051, 0.58407849, 0.59061891, 0.59720188, 0.60382742,
      0.61049563, 0.61720663, 0.62396044, 0.63075721, 0.63759696, 0.64447975, 0.65140569, 0.65837485, 0.66538733,
      0.67244321, 0.67954254, 0.68668544, 0.69387192, 0.70110202, 0.70837593, 0.71569365, 0.72305524, 0.73046088,
      0.73791057, 0.74540436, 0.75294232, 0.76052463, 0.76815128, 0.77582234, 0.78353792, 0.79129803, 0.79910284,
      0.80695236, 0.81484669, 0.82278585, 0.83076996, 0.83879912, 0.84687328, 0.85499269, 0.86315727, 0.87136722,
      0.87962234, 0.88792318, 0.89626938, 0.90466136, 0.91309869, 0.92158204, 0.93011087, 0.93868589, 0.94730657,
      0.95597351, 0.96468627, 0.97344548, 0.98225057, 0.99110222, 1.00000000)

    sb ++= "const sRGBTable = [256]f32{ "
    sb ++= srgbTable.mkString(", ")
    sb ++= "};\n\n"
